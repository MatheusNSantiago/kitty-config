# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# You can use the special action no_op to unmap a keyboard shortcut that is assigned in the default configuration.

# You can combine multiple actions to be triggered by a single shortcut, using the syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example, this will create a new window and switch to the next available layout:
# map kitty_mod+e combine : new_window : next_layout

# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example, this will change the font size to 20 points when you press ctrl+f and then 2:
# map ctrl+f>2 set_font_size 20

# ╭──────────────────────────────────────────────────────────╮
# │                           Base                           │
# ╰──────────────────────────────────────────────────────────╯

clear_all_shortcuts             yes
kitty_mod                       ctrl+shift

# deixa o vim enviar comandos pro kitty
allow_remote_control            yes
listen_on                       unix:@mykitty

map ctrl+shift+c                copy_to_clipboard
map ctrl+shift+v                paste_from_clipboard

#  ╭──────────────────────────────────────────────────────────╮
#  │                      Tab management                      │
#  ╰──────────────────────────────────────────────────────────╯

map kitty_mod+t                 new_tab

map kitty_mod+ç                 next_tab
map kitty_mod+j                 previous_tab
map shift+super+ç               next_tab
map shift+super+j               previous_tab

map kitty_mod+t                 launch --cwd=current --type=tab
map kitty_mod+x                 close_tab
map kitty_mod+.                 move_tab_forward
map kitty_mod+,                 move_tab_backward

map kitty_mod+1                 goto_tab 1
map kitty_mod+2                 goto_tab 2
map kitty_mod+3                 goto_tab 3
map kitty_mod+4                 goto_tab 4
map kitty_mod+5                 goto_tab 5

#  ╭──────────────────────────────────────────────────────────╮
#  │                    Window management                     │
#  ╰──────────────────────────────────────────────────────────╯

map super+space                 launch --location=vsplit --cwd=last_reported
map super+enter                 launch --location=hsplit --cwd=last_reported
map super+w                     close_window

# navagação entre janelas/splits (interoperabilidade com nvim)
# REF: https://github.com/knubie/vim-kitty-navigator
# map super+shift+l                      kitten pass_keys.py neighboring_window top    ctrl+w>k
# map super+shift+k                      kitten pass_keys.py neighboring_window bottom ctrl+w>j
# map super+shift+j                      kitten pass_keys.py neighboring_window left   ctrl+w>h
# map super+shift+ç                      kitten pass_keys.py neighboring_window right  ctrl+w>l
map super+l               neighboring_window top
map super+k               neighboring_window bottom
map super+j               neighboring_window left
map super+ç               neighboring_window right

# Mover janelas
map ctrl+super+l                move_window up
map ctrl+super+k                move_window down
map ctrl+super+j                move_window left
map ctrl+super+ç                move_window right

# Resize
map ctrl+shift+super+l          kitten relative_resize.py up
map ctrl+shift+super+k          kitten relative_resize.py down
map ctrl+shift+super+j          kitten relative_resize.py left
map ctrl+shift+super+ç          kitten relative_resize.py right


# You can pass the current selection to the new program by using the @selection placeholder
# map kitty_mod+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map kitty_mod+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd

#  ╭──────────────────────────────────────────────────────────╮
#  │                   Layout management                      │
#  ╰──────────────────────────────────────────────────────────╯

map kitty_mod+r>t               goto_layout tall
map kitty_mod+r>f               goto_layout fat
map kitty_mod+r>s               goto_layout stack

# ╭──────────────────────────────────────────────────────────╮
# │                      FontSize {{{                        │
# ╰──────────────────────────────────────────────────────────╯

map ctrl+equal                  change_font_size all +1.0
map ctrl+minus                  change_font_size all -1.0
map ctrl+0                      change_font_size all 0
# }}}

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Outros                          │
#  ╰──────────────────────────────────────────────────────────╯

# map cmd+left click to open URLs
mouse_map super+left            release grabbed,ungrabbed mouse_handle_click link

#  ╭──────────────────────────────────────────────────────────╮
#  │              TESTEs
#  ╰──────────────────────────────────────────────────────────╯

action_alias new_tab_current launch --cwd=current --type=tab
action_alias nvim new_tab_current --tab-title="⟜  ⊸" nvim
action_alias term new_tab_current --tab-title="⟜  ⊸"
action_alias xplr new_tab_current --tab-title="⟜ 󰭎 ⊸" xplr

map kitty_mod+r>r combine : nvim : term : xplr : goto_tab 1 : close_tab : next_tab

# map ctrl+k kitten mykitten.py
